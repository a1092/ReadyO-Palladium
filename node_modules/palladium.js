var util = require('util');
var EventEmitter = require('events').EventEmitter;
var WebSocket = require('ws');



var Palladium = function (serv, app) {

	EventEmitter.call(this);

	this.palladiumClient = null;
	this.palladiumServer = null;

	this.time2reconnect = 0;

	this.host = serv.host;
	this.port = serv.port;
	this.channel = serv.channel;
	this.privateKey = app.privateKey;
	this.subscribtions = app.subscribtions;
}

util.inherits(Palladium, EventEmitter);




Palladium.prototype.connect = function connect() {
	
	var self = this;

	palladiumServer = new WebSocket('ws://'+self.host+':'+self.port+'/'+self.channel);
	palladiumServer.binaryType = 'blob';

	palladiumServer.on('open', function() {

		time2reconnect = 0;

		self.send("fr/readyo/palladium/register", {
				privateKey: self.privateKey,
				subscribtions: self.subscribtions
		});

		console.log("[INFO] Connection to Palladium Server successful.")
	});


	palladiumServer.on('close', function() {
		console.log("[ERROR] The connection with Palladium Server was broken.");
		self.reconnect();
	});

	palladiumServer.on('error', function(error) {
		console.log("[ERROR] An error of connection happen with Palladium Server : "+error);
		self.reconnect();
	});

	palladiumServer.on('message', function(incoming) {
		msg = JSON && JSON.parse(incoming) || $.parseJSON(incoming);
		self.emit(msg.topic, msg.data);
	});

	self.keepAlive();
}


Palladium.prototype.reconnect = function reconnect() {

	var self = this;

	if(self.time2reconnect < 120)
		self.time2reconnect += 10;

	console.log("[INFO] Connection to Palladium Server in "+self.time2reconnect+" sec.")
	
	setTimeout(function() {
		self.connect();
	}, self.time2reconnect*1000);
}

Palladium.prototype.send = function(topic, data) {
	
	if(palladiumServer.readyState == WebSocket.OPEN)
		palladiumServer.send(JSON.stringify({
			topic: topic,
			data: data
		}));
}


Palladium.prototype.keepAlive = function() {
	
	var self = this;

	self.send("fr/readyo/palladium/system/keepalive", {});

	setTimeout(function() {
		self.keepAlive();
	}, 60*1000);
}


module.exports = Palladium;